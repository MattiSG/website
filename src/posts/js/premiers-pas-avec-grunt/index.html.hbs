---
lang: fr
layout: post.hbs
type: post
comments: true
draft: true
title: Premiers pas avec Grunt
author: kud
tags:
  - virtualbox
  - tools
  - vagrant
readingTime: Xmin
---

{{#markdown}}
Vous avez sûrement déjà entendu parler de Grunt à droite à gauche, en conférence, voire votre boite l'utilise déjà mais vous ne savez toujours pas trop ce qu'est ce terme saugrenu digne d'un personnage de Warcraft. Soit, ce n'est pas bien grave. Sachez que Grunt est en fait un *JavaScript Task Runner*, un outil vous permettant de créer des tâches automatisées en JavaScript. Forcément ce n'est pas très parlant mais c'est tout l'intérêt de cet article, vous expliquer ce qu'est Grunt et pourquoi il peut vous être utile dans un *workflow* de front-end dev.

Je ne sais pas si c'est votre cas mais vous est-il déjà arrivé de devoir régulièrement lancer et relancer des processus tels que Sass, LESS, uglify, bref des préprocesseurs ou des minifiers à la main ? N'est-ce pas pénible ? N'est-ce pas aussi pénible de devoir indiquer à tous ses collègues comment ils doivent bosser pour que vous soyez tous cohérents ? Oui ? Grunt permet de résoudre ce genre de choses.

Typiquement, voici un _workflow_ assez classique :

- Compiler mes ```.scss``` en ```.css```
- Concaténer mes ```*.js``` en un seul fichier
- Minifier (avec uglify par exemple) mon fichier JavaScript final

Voyons maintenant comment l'on peut mettre en place ceci via Grunt.

Tout d'abord, installons Grunt. Notez que Grunt est en nodejs et que je considère que vous avez déjà nodejs d'installé.


## Installation

En premier lieu, il faut installer le *package* qui permet de gérer grunt en ligne de commande.

```shell
$ npm install -g grunt-cli
```

Une fois cela fait, installez grunt en local dans votre projet.

```shell
$ npm install grunt --save-dev
```

Ni plus ni moins, Grunt est enfin installé dans votre projet.

Maintenant, il est nécessaire de créer un fichier de configuration Grunt. Pour cela, nous allons créer un fichier nommé ```Gruntfile.js``` à la racine de votre projet.

```shell
$ touch Gruntfile.js
```

Une fois fait, voici à quoi doit ressemblait la base d'une configuration Grunt.

```javascript
module.exports = function(grunt) {

  // Configuration de Grunt
  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json')
  })

  // Définition des tâches grunt
  grunt.registerTask('default', '')

}
```

Bien. Nous avons maintenant tout le nécessaire pour débuter notre projet. Revenons un peu en arrière et nous expliquions que nous voulons en tout premier lieu compiler nos ```.scss``` en ```.css```.

Une petite recherche sur votre moteur de recherche préféré en tapant ```grunt sass``` et vous trouverez le projet (```grunt-contrib-sass```)[https://github.com/gruntjs/grunt-contrib-sass].

Toute la documentation pour l'insaller est alors indiquée sur chaque ```README.md``` de projets Grunt mais pour un souci de clarté et de compréhension, je vais tout de même vous expliquer ici comment faire.

D'abord, installons le package pour Sass.

```shell
$ npm install grunt-contrib-sass --save-dev
```

Ceci va installer le _package_ ```grunt-contrib-sass`` dans votre dossier ```node_modules``` et vous pourriez l'utiliser l'utiliser en important ce _package_ dans votre ```Gruntfile.js```.

```javascript
module.exports = function(grunt) {

  grunt.initConfig({
    sass: {                              // Nom de la tâche
      dist: {                            // Nom de la sous-tâche
        options: {                       // Options
          style: 'expanded'
        },
        files: {                         // Liste des fichiers
          'main.css': 'main.scss',       // 'destination': 'source'
          'widgets.css': 'widgets.scss'
        }
      }
    }
  })

  // Import du package
  grunt.loadNpmTasks('grunt-contrib-sass')

  // Redéfinition de la tâche `default` qui est la tâche lancée dès que vous lancez grunt sans rien spécifier.
  // Note : ici, nous définissons sass comme une tâche à lancer si on lance la tâche `default`.
  grunt.registerTask('default', ['sass:dist'])
}
```

Nous avons maintenant tout le nécessaire pour pouvoir compiler nos ```.scss``` en  ```.css```.

Vous vous demandez peut-être comment vous pouvez généraliser vos sources plutôt que les définir une par une.

```javascript
module.exports = function(grunt) {

  grunt.initConfig({
    sass: {
      dist: {
        options: {
          style: 'expanded'
        },
        files: {
          "expand": true,
          "cwd": "src/styles/",
          "src": ["*.scss"],
          "dest": "dist/styles/",
          "ext": ".css"
        }
      }
    }
  })

  grunt.loadNpmTasks('grunt-contrib-sass')

  grunt.registerTask('default', ['sass:dist'])
}
```




{{/markdown}}
